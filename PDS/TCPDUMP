/*REXX*****************************************************************
*                                                                     *
* TCPDUMP v1.1 - CTrace-to-tcpdump format converter                   *
*                                                                     *
* Copyright (C) 2003-2005 Andrew J. Armstrong                         *
* andrew_armstrong(at)unwired.com.au                                  *
*                                                                     *
* This program is free software; you can redistribute it and/or modify*
* it under the terms of the GNU General Public License as published by*
* the Free Software Foundation; either version 2 of the License, or   *
* (at your option) any later version.                                 *
* This program is distributed in the hope that it will be useful,     *
* but WITHOUT ANY WARRANTY; without even the implied warranty of      *
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the       *
* GNU General Public License for more details.                        *
* You should have received a copy of the GNU General Public License   *
* along with this program; if not, write to the Free Software         *
* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307*
*                                                                     *
**********************************************************************/

/*REXX*****************************************************************
**                                                                   **
** NAME     - TCPDUMP                                                **
**                                                                   **
** VERSION  - 1.1                                                    **
**                                                                   **
** FUNCTION - Converts an OS/390 or z/OS TCP/IP packet trace file    **
**            into tcpdump format. You can download the resulting    **
**            output file to a PC (in binary mode) and analyze it    **
**            using Ethereal (a freebie from www.ethereal.com) or    **
**            any other network analyzer software that supports      **
**            the tcpdump file format.                               **
**                                                                   **
** SYNTAX   - TCPDUMP Ýoutdsn Ýindsn¨¨ (options                      **
**                                                                   **
**            Where,                                                 **
**                                                                   **
**            outdsn = Output tcpdump dataset (RECFM=VB/1600 is best).*
**                     The output dataset is specified first because **
**                     you are most likely to want to re-specify this**
**                     parameter.  You generally set the input trace **
**                     dataset name once and re-use it for subsequent**
**                     traces. Both the input and output dataset     **
**                     names are remembered across invocations so    **
**                     you do not have to re-specify them each time. **
**                                                                   **
**                     If you initially specify a PDS dataset and    **
**                     member name - e.g. MY.PDS(MYDUMP1) - then you **
**                     can specify just a member name the next time  **
**                     - e.g. MYDUMP2 - and the last PDS will be     **
**                     used. By specifying '..' for 'outdsn' you     **
**                     will be prompted to enter a new dataset name. **
**                                                                   **
**                     A typical session might look like:            **
**                                                                   **
**                     1. a. Capture a packet trace to sys1.trace    **
**                        b. Convert it to tcpdump format by:        **
**                           tso tcpdump                             **
**                           Enter input dataset name:               **
**                           'sys1.trace'                            **
**                           Enter output dataset name:              **
**                           'a.b.c(d1)'                             **
**                        c. FTP 'a.b.c(d1)' to your PC and open it  **
**                           using ethereal.                         **
**                                                                   **
**                     2. a. Capture another packet trace to         **
**                           sys1.trace                              **
**                        b. Convert it to tcpdump format in the     **
**                           same PDS but this time into member d2:  **
**                           tso tcpdump d2                          **
**                        c. FTP 'a.b.c(d2)' to your PC and open it  **
**                           using ethereal.                         **
**                                                                   **
**                     3. a. Capture another packet trace to         **
**                           sys1.trace                              **
**                        b. Convert it to tcpdump format but this   **
**                           time in a different PDS:                **
**                           tcpdump ..                              **
**                           Enter output dataset name:              **
**                           'd.e.f(d3)'                             **
**                        c. FTP 'd.e.f(d3)' to your PC and open it  **
**                           using ethereal.                         **
**                                                                   **
**                                                                   **
**            indsn  = Input trace dataset (output from CTRACE).     **
**                                                                   **
**            options= ETHERNET  - for ETHERNET II frame type (this  **
**                                 is the default and is usually ok).**
**                     TOKENRING - for 802.2 frame type.             **
**                     FDDI      - for FDDI frame type.              **
**                     ATM       - for ATM RFC1483 frame type.       **
**                     LANE      - for ATM LAN Emulation frame type. **
**                                                                   **
**                     RANGE Ýstart Ýend¨¨                           **
**                               - convert only packets between      **
**                                 packet number 'start' and 'end'.  **
**                                 'start' defaults to 1.            **
**                                 'end' defaults to the last packet.**
**                                                                   **
**                     TRACE Ýstart Ýend¨¨                           **
**                               - display a brief summary of packets**
**                                 between 'start' and 'end'.        **
**                                                                   **
**                     DEBUG Ýstart Ýend¨¨                           **
**                               - display a more detail for packets **
**                                 between 'start' and 'end'.        **
**                                                                   **
**                     ONLY      - ONLY means quit when the 'end'    **
**                                 packet is reached (when TRACE or  **
**                                 DEBUG is also specified).         **
**                                                                   **
**                                                                   **
** NOTES    - 1. The format of the input trace file is release       **
**               dependent. Version 1.1 works with OS/390 2.10 and   **
**               z/OS 1.1 to 1.4.                                    **
**                                                                   **
**            2. The frametype does not seem to be critical to       **
**               Ethereal (it seems to ignore it) so you can let it  **
**               default to ETHERNET if you like.                    **
**                                                                   **
**                                                                   **
** AUTHOR   - Andrew Armstrong <andrew_armstrong(at)unwired.com.au>  **
**                                                                   **
**                                                                   **
** HISTORY  - Date     By  Reason (most recent at the top please)    **
**            -------- --- ----------------------------------------- **
**            20041123 AJA Handle a wrapped trace file properly.     **
**            20041105 AJA Replace deprecated find() with wordpos(). **
**                         Removed flawed attempt to retrieve MAC    **
**                         address associated with IP address.       **
**                         Removed the PING option accordingly.      **
**                         A fake MAC address is generated from the  **
**                         link name and IP address.                 **
**            20030502 AJA Cleaned up and documented.                **
**            20030130 AJA Initial version                           **
**                                                                   **
**********************************************************************/

  numeric digits 20

  arg sOutDSN sInDSN'('sOptions')'

  address TSO 'CLEAR'

  parse source . . sMe .
  say 'TCPD001I' sMe': Ctrace-to-tcpdump format converter v1.1'

  g. = 0
  call getOptions sOptions

  address ISPEXEC 'VGET (TCPDUMPI TCPDUMPO) PROFILE'

  TCPDUMPI = getDSN('TCPD002I Enter input dataset name:',,
                     sInDSN, TCPDUMPI)
  TCPDUMPO = getDSN('TCPD002I Enter output dataset name:',,
                     sOutDSN,TCPDUMPO)
  say 'TCPD003I Converting' TCPDUMPI 'to' TCPDUMPO

  if g.!OPT.RANGE
  then select
    when g.!OPT.RANGE.0 = 0 then,
         say 'TCPD004I Converting all'
    when g.!OPT.RANGE.0 = 1 then,
         say 'TCPD004I Converting from' g.!OPT.RANGE.1
    otherwise,
         say 'TCPD004I Converting from packet' g.!OPT.RANGE.1,
                                   'to packet' g.!OPT.RANGE.2
  end

  if g.!OPT.TRACE
  then select
    when g.!OPT.TRACE.0 = 0 then,
         say 'TCPD005I Tracing all'
    when g.!OPT.TRACE.0 = 1 then,
         say 'TCPD005I Tracing from' g.!OPT.TRACE.1
    otherwise,
         say 'TCPD005I Tracing from' g.!OPT.TRACE.1,
                                'to' g.!OPT.TRACE.2
  end

  call Prolog

  g.!HEADERLEN = 70
  g.!PACKET    = 0
  g.!WRITTEN   = 0

  call skipToStartOfTrace  /* ...may not be the first record */

  if g.!STARTOFTRACE = 0   /* If trace starts at the first record */
  then call extractPackets /* ...until EOF */
  else do
    call readTraceRecord   /* Read first record after wrap point */
    if g.!RC = 0
    then do
      call extractPackets  /* ...from wrap point to EOF */
      say 'TCPD008I Wrapped after packet' g.!PACKET
    end
    call closeFile 'INPUT'
    call readTraceRecord
    call extractPackets    /* ...from start of file to wrap point */
  end

  call Epilog
exit

readTraceRecord: procedure expose g.
  'EXECIO 1 DISKR INPUT (STEM g.'
  g.!RC = rc
return

extractPackets: procedure expose g.
  do while g.!RC = 0 & \g.!QUIT
    parse var g.1 17 sBlk +4 22 cFlag +1 sSeq +2
    if sSeq = '0001'x
    then parse var g.1 181 sData /* First chunk of a trace buffer */
    else parse var g.1 183 sData /* Remaining chunks */
    sPackets = ''
    do while g.!RC = 0 & cFlag = g.!CONTINUATION
      sPackets = sPackets || sData
      call readTraceRecord
      parse var g.1 17 sBlk +4 22 cFlag +1 sSeq +2 183 sData
    end
    sPackets = sPackets || sData
    do while \g.!QUIT & length(sPackets) > 0
      parse var sPackets sHeader +(g.!HEADERLEN) sPackets
      parse var sHeader,
                sPrevChunkLen +2, /* Length of previous chunk    */
                sThisChunkLen +2, /* Length of this chunk        */
                sJunk2        +6, /* ?                           */
                sTOD1         +8, /* A Time-Of-Day clock value   */
                cFlag1        +1, /* Flag: partial data          */
                cFlag2        +1, /* Flag: packet direction      */
                sJunk3        +4, /* ?                           */
                sPacketLen    +2, /* Length of this packet       */
                sLinkName    +16, /* Link name presenting packet */
                sSourceIP     +4, /* Source IP address           */
                sDestIP       +4, /* Destination IP address      */
                sTOD2         +8, /* Another TOD clock value     */
                sSourcePort   +2, /* Source port number          */
                sDestPort     +2, /* Destination port number     */
                sJunk4        +6  /* ?                           */
      if sThisChunkLen = '' then leave

      if g.!OPT.DEBUG then call showDebug

      nChunkLen  = c2d(sThisChunkLen) - g.!HEADERLEN
      parse var sPackets sPacket +(nChunkLen) sPackets
      if isSet(cFlag1,g.!PARTIAL_PACKET) then iterate

      call emitPcapPacket

    end
    call readTraceRecord
    if cFlag = g.!WRAP_POINT then leave
  end
return

skipToStartOfTrace: procedure expose g.
  say 'TCPD006I Finding start of trace'
  'EXECIO 1 DISKR INPUT (STEM g.'
  do nSkip = 0 while rc = 0
    parse var g.1 22 cFlag +1
    if cFlag = g.!WRAP_POINT then leave
    'EXECIO 1 DISKR INPUT (STEM g.'
  end
  g.!RC = rc
  g.!STARTOFTRACE = nSkip
  say 'TCPD007I Trace data starts at record' g.!STARTOFTRACE+1
return

/*
* Parse the specified options line and build global variables
* representing the keyword options and any values they may have.
*
* Global variables set are:
*
*  g.!OPT.keyword   = 1 if keyword is present (else = 0)
*  g.!OPT.keyword.0 = count of numeric values appearing after keyword
*  g.!OPT.keyword.1 = first numeric value after keyword
*  g.!OPT.keyword.2 = second numeric value after keyword
*  g.!OPT.keyword.n = nth numeric value after keyword
*
*/
getOptions: procedure expose g.
  arg sOptions
  do i = 1 to words(sOptions)
    sOption = word(sOptions,i)
    if datatype(sOption,'UPPERCASE') /* i.e. a keyword */
    then call getOption(sOption)
  end
return

getOption: procedure expose g. sOptions
  arg sOption
  n = wordpos(sOption,sOptions)
  g.!OPT.sOption    = n > 0
  if n > 0
  then do
    j = 0
    do i = n+1 to words(sOptions),
       while datatype(word(sOptions,i),'NUMBER') /* i.e. a value */
       j = j + 1
       g.!OPT.sOption.j = word(sOptions,i)
    end
    g.!OPT.sOption.0 = j /* ...number of numeric values after keyword */
  end
return

showDebug:
  if g.!PACKET = 0 then return
  if g.!OPT.DEBUG.0 = 0 /* ...DEBUG all */             |,
    (g.!OPT.DEBUG.0 = 1 & g.!PACKET >= g.!OPT.DEBUG.1) |,
    (g.!OPT.DEBUG.0 = 2 & g.!PACKET >= g.!OPT.DEBUG.1,
                        & g.!PACKET <= g.!OPT.DEBUG.2)
  then do
    sLink = strip(translate(sLinkName,'.',xrange('00'x,'3f'x)))
    if isSet(cFlag2,g.!OUTBOUND_PACKET)
    then sDataFlow = c2i(sSourceIP)':'c2d(sSourcePort),
                     '---'sLink'-->',
                     c2i(sDestIP)':'c2d(sDestPort)
    else sDataFlow = c2i(sDestIP)':'c2d(sDestPort),
                     '<--'sLink'---',
                     c2i(sSourceIP)':'c2d(sSourcePort)
/*
nnnnnn pc=xxxx cl=xxxx j2=xxxxxxxxxxxx
       t1=xxxxxxxxxxxxxxxx yyyy/mm/dd hh:mm:ss.nnnnnn f1=xx f2=xx
       j3=xxxxxxxx
       t2=xxxxxxxxxxxxxxxx yyyy/mm/dd hh:mm:ss.nnnnnn pl=nnnnn
       aaa.bbb.ccc.ddd:eeeee---kkkkkkkkkkkkkkkk-->aaa.bbb.ccc.ddd:eeeee
       j4=xxxxxxxxxxxx
*/
    say right(g.!PACKET,6,'0'),
               'pc='c2x(sPrevChunkLen ),
               'cl='c2x(sThisChunkLen ),
               'j2='c2x(sJunk2        )
    say '      ',
               't1='c2x(sTOD1         ) getTimeStamp(c2d(sTOD1)),
               'f1='c2x(cFlag1        ),
               'f2='c2x(cFlag2        )
    say '      ',
               'j3='c2x(sJunk3        )
    say '      ',
               't2='c2x(sTOD2         ) getTimeStamp(c2d(sTOD2)),
               'pl='c2x(sPacketLen    )
    say '      ',
               sDataFlow
    say '      ',
               'j4='c2x(sJunk4        )
  end
  if g.!OPT.ONLY & g.!PACKET >=g.!OPT.DEBUG.2
  then g.!QUIT = 1
return

isSet: procedure
  parse arg cFlag,cMask
return bitand(cFlag,cMask) = cMask

Out: procedure
  parse arg sData
  push sData
  'EXECIO 1 DISKW OUTPUT'
return

/*
* Prompt the user if necessary for a dataset name and return only
* if the dataset exists. The user can force the use of the last
* dataset by specifying '.' and can ask to be prompted for a new
* dataset by specifying '..'.
*
*/
getDSN: procedure
  parse arg sPrompt,sArg,sVar

  select
    when sArg = ''   then sDSN = sVar
    when sArg = '.'  then sDSN = sVar
    when sArg = '..' then sDSN = ''
    otherwise             sDSN = sArg
  end

  if sDSN = ''
  then do                  /* Prompt if no current value */
    say sPrompt
    pull sDSN
    if sDSN = ''
    then call Abort 'TCPD015I No value supplied'
  end
  else do
    if isMemberName(sDSN) & pos('(',sVar) > 0
    then do                /* Use new member in same PDS */
      parse var sVar sDataset'('
      sDSN = sDataset'('sDSN')'
    end
  end

  sResult = SYSDSN(sDSN)

  select
    when sResult = 'OK'               then return sDSN
    when sResult = 'MEMBER NOT FOUND' then return sDSN
    otherwise call Abort 'TCPD011E' sDSN':' sResult
  end
exit

Abort: procedure expose g.
  parse arg sMsg
  say sMsg
  say 'TCPD016W Awwooga, Awwooga, Abandon ship.'
exit

isMemberName: procedure
  arg sMember
  if length(sMember) > 8 then return 0
  if length(sMember) = 0 then return 0
  if datatype(left(sMember,1),'WHOLE') then return 0
return datatype(substr(sMember,2),'ALPHANUMERIC')

Prolog:
  /* cFlag values ... */
  g.!WRAP_POINT           = '00'x
  g.!CONTINUATION         = '01'x
  g.!LAST_IN_TRACE_BUFFER = '02'x

  /* cFlag1 values ... */
  g.!PARTIAL_PACKET       = '01'x

  /* cFlag2 values ... */
  g.!OUTBOUND_PACKET      = '01'x

  g.!LAST_TOD = 0
  g.!FIRST_TOD = 0

  g.!TCPDUMP_MAGIC         = 'd4c3b2a1'x
  g.!PCAP_VERSION_MAJOR    = u_short(2)
  g.!PCAP_VERSION_MINOR    = u_short(4)

  /* From libpcap-0.7.1.tar.gz (bpf.h and savefile.c) ... */
  g.!LINKTYPE_ETHERNET     = u_int32(1)
  g.!LINKTYPE_TOKEN_RING   = u_int32(6)
  g.!LINKTYPE_FDDI         = u_int32(10)
  g.!LINKTYPE_ATM_RFC1483  = u_int32(100)
  g.!LINKTYPE_ATM_LANE8023 = u_int32(110)

  select
    when g.!OPT.TOKENRING then g.!LINKTYPE = g.!LINKTYPE_TOKEN_RING
    when g.!OPT.FDDI      then g.!LINKTYPE = g.!LINKTYPE_FDDI
    when g.!OPT.LANE      then g.!LINKTYPE = g.!LINKTYPE_ATM_LANE8023
    when g.!OPT.ATM       then g.!LINKTYPE = g.!LINKTYPE_ATM_RFC1483
    otherwise                  g.!LINKTYPE = g.!LINKTYPE_ETHERNET
  end

  g.!PROTOCOL_TCPIP       = u_short(8)

  /* 1 Year = 365 days 5 hours 48 minutes 45.51 seconds (no joke) */
  g.!EPOCH = trunc((70*(((365*24+5)*60+48)*60+45.51)+380)*1000000)
  g.!DAYLIGHT_ADJ = 3600 * 1000000      /* 1 hour in microseconds    */

  g.!TZ = mvsvar('symdef','lhr') - mvsvar('symdef','hr')

  g.!THIS_ZONE    = u_int32(-g.!TZ*3600) /* gmt to local correction  */
  g.!SIG_FIGS     = u_int32(0)          /* accuracy of timestamps    */
  g.!SNAP_LEN     = u_int32(65535)      /* max len saved of each pkt */
  g.!FILE_HEADER  = g.!TCPDUMP_MAGIC      ||,
                    g.!PCAP_VERSION_MAJOR ||,
                    g.!PCAP_VERSION_MINOR ||,
                    g.!THIS_ZONE          ||,
                    g.!SIG_FIGS           ||,
                    g.!SNAP_LEN           ||,
                    g.!LINKTYPE


  call Alloc 'INPUT' TCPDUMPI
  call Alloc 'OUTPUT' TCPDUMPO
  call emitPcapFileHeader
return

emitPcapFileHeader:
  call Out g.!FILE_HEADER
return

emitPcapPacket:
  g.!PACKET = g.!PACKET + 1

  nTOD = c2d(sTOD2)
  if nTOD < g.!LAST_READ_TOD
  then do
    nDiff = (g.!LAST_READ_TOD - nTOD) / 4096 / 1000000
    say 'TCPD009W Time warp at packet' g.!PACKET '-',
        'time went backwards by' format(nDiff,,3) 'seconds.'
  end
  if g.!FIRST_READ_TOD = 0
  then do
    g.!FIRST_READ_TOD = nTOD
    g.!FIRST_READ_PKT = g.!PACKET
  end
  g.!LAST_READ_TOD = nTOD
  g.!LAST_READ_PKT = g.!PACKET

  sTimeStamp = ctime(sTOD2)
  sCaptureLen = u_int32(14+nChunkLen)
  sWireLen = sCaptureLen
  sDA = getMacAddr(sDestIP,   sLinkName)
  sSA = getMacAddr(sSourceIP, sLinkName)
  sFrame = sDA || sSA || g.!PROTOCOL_TCPIP || sPacket

  if \g.!OPT.RANGE |,
     (g.!OPT.RANGE & g.!OPT.RANGE.0 > 0 & g.!PACKET >= g.!OPT.RANGE.1)
  then do
    call Out sTimeStamp || sCaptureLen || sWireLen || sFrame
    g.!WRITTEN = g.!WRITTEN + 1
    if g.!FIRST_WRITE_TOD = 0
    then do
      g.!FIRST_WRITE_TOD = nTOD
      g.!FIRST_WRITE_PKT = g.!PACKET
    end
    g.!LAST_WRITE_TOD = nTOD
    g.!LAST_WRITE_PKT = g.!PACKET
    if g.!OPT.RANGE & g.!OPT.RANGE.0 = 2 & g.!PACKET >= g.!OPT.RANGE.2
    then g.!QUIT = 1
  end
  if g.!OPT.TRACE then call showTrace
return

showTrace:
/*
#nnnnnn lllll <start of packet in hex>...<end of packet in hex>
*/
  if g.!OPT.TRACE.0 = 0 /* ...trace all */             |,
    (g.!OPT.TRACE.0 = 1 & g.!PACKET >= g.!OPT.TRACE.1) |,
    (g.!OPT.TRACE.0 = 2 & g.!PACKET >= g.!OPT.TRACE.1,
                        & g.!PACKET <= g.!OPT.TRACE.2)
  then say 'TCPD010I #'left(g.!PACKET,6) right(nChunkLen,5),
            c2x( left(sPacket,20))'...'

  if g.!OPT.ONLY & g.!PACKET >= g.!OPT.TRACE.2
  then g.!QUIT = 1
return

/*
* Return a fake MAC address for the given IP address.
* The address returned is in the format: xxxxxxxxccdd
* ...where xxxxxxxx is the last four bytes of the link name
*      and aabbccdd is the binary IP v4 address.
* The link name is most likely something like EN0 or LINKB40
* i.e. the rightmost bytes being the most variable.
* We put the four rightmost bytes of the link name at the front of
* the fake MAC address. This allows you to tell Ethereal to
* color-code packets based on the OSA link they passed through.
*/
getMacAddr: procedure expose g.
  parse arg sIPAddr,sLinkName
return right(strip(sLinkName),4)right(sIPAddr,2)


/*
* Convert TOD clock value to a ctime representation
*/
ctime: procedure expose g.
  parse arg sTOD
  nTOD = c2d(sTOD) / 4096                   /* usecs since 1900 */
  nTOD = nTOD - g.!EPOCH - g.!DAYLIGHT_ADJ  /* usecs since 1970 */
  nSecs = trunc(nTOD/1000000)               /* secs since 1970 */
  nMicrosecs =  trunc(nTOD - nSecs*1000000) /* usecs into the day */
  sSecs = u_int32(nSecs)
  sMicrosecs = u_int32(nMicrosecs)
  sTimeStamp = sSecs || sMicrosecs
return sTimeStamp


/*
* Return an unsigned short integer
*/
u_short: procedure
  arg nNumber
return reverse(d2c(nNumber,2))

/*
* Return an unsigned 32-bit integer
*/
u_int32: procedure
  arg nNumber
return reverse(d2c(nNumber,4))



Epilog:
  address ISPEXEC 'VPUT (TCPDUMPI TCPDUMPO) PROFILE'
  call Free 'INPUT'
  call Free 'OUTPUT' 'DISKW'
  call Log 'First written',g.!FIRST_WRITE_TOD,g.!FIRST_WRITE_PKT
  call Log 'Last written ',g.!LAST_WRITE_TOD,g.!LAST_WRITE_PKT
  call SaySpan g.!FIRST_WRITE_TOD,g.!LAST_WRITE_TOD
  say 'TCDP999I Done'
return

Log: procedure expose g.
  parse arg sMsg,nTOD,nPacket
  say 'TCPD013I' sMsg getTimeStamp(nTOD) '#'nPacket
return

SaySpan: procedure expose g.
  parse arg nTODFirst,nTODLast
  say 'TCPD014I Spanning     ',
      format((nTODLast - nTODFirst) / 4096000000,19,6) 'seconds'
return

/*
* Convert a TOD clock value into a human readable date and time
* Note: this routine expects your machine's TOD clock to be UTC.
*/
getTimeStamp: procedure expose g.
  arg nTOD                                    /* TOD clock in decimal */
  nTodDays = nTod / 4096 / 1000000 / 86400    /* days since 1900      */
  nTodDays = nTodDays + g.!TZ/24              /* +/- timezone         */
  nRexxDays = 693595 + trunc(nTodDays)        /* days since 0000      */
  nFractionOfDay = nTodDays - trunc(nTodDays)
  nSecsIntoDay = nFractionOfDay * 86400       /* secs since midnight  */
  nHH = trunc(nSecsIntoDay / 3600)            /* hour since midnight  */
  nSecsIntoHour = nSecsIntoDay - nHH * 3600
  nMM = trunc(nSecsIntoHour / 60)             /* minute of the hour   */
  nSS = nSecsIntoHour - nMM * 60              /* seconds              */

  sYYYYMMDD = date('STANDARD', nRexxDays, 'BASE')

  sTimeStamp =  translate('abcd/ef/gh',sYYYYMMDD,'abcdefgh'),
                right(nHH,2,'0')':'  ||,
                right(nMM,2,'0')':'  ||,
                translate(format(nSS,2,6),'0',' ')
return sTimeStamp        /* yyyy/mm/dd hh:mm:ss.nnnnnn */

/*
Convert a binary IP address into dotted decimal format
*/
c2i: procedure
  parse arg c1 +1 c2 +1 c3 +1 c4 +1
return c2d(c1)'.'c2d(c2)'.'c2d(c3)'.'c2d(c4)

Alloc:
  arg sDD sDSN sOptions
  if sOptions = '' then sOptions = 'SHR'
  call Free sDD
  address TSO 'ALLOC DD('sDD') DSN('sDSN')' sOptions
return

Free:
  arg sDD sOption
  if sOption <> 'DISKW' then sOption = 'DISKR'
  x = outtrap('o.')
  address TSO
  'EXECIO 0' sOption sDD '(FINIS'
  'FREE DD('sDD')'
  address
  x = outtrap('OFF')
return

closeFile: procedure expose g.
  arg sDD sOption
  if sOption <> 'DISKW' then sOption = 'DISKR'
  x = outtrap('o.')
  address TSO
  'EXECIO 0' sOption sDD '(FINIS'
  address
  x = outtrap('OFF')
return
